version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - static_volume:/app/static
    ports:
      - "8000:8000"
    networks:
      - GetUsed-network
    depends_on:
      - postgres-db
      - redis
      - celery
    env_file:
      - .env.docker
    restart: on-failure:5
    healthcheck:
      test: curl -f http://127.0.0.1:8000/api/health || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s

  postgres-db:
    image: postgres:latest
    env_file:
      - .env.docker
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - GetUsed-network
    restart: on-failure:5
    healthcheck:
      test: ["CMD", "pg_isready -d ${DB_NAME}"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - GetUsed-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  celery:
    build:
      context: .
    command: celery -A GetUsed worker --loglevel=info
    depends_on:
      - redis
      - postgres-db
    volumes:
      - .:/app
    networks:
      - GetUsed-network
    env_file:
      - .env.docker

  celery-beat:
    build:
      context: .
    command: celery -A GetUsed beat --loglevel=info
    depends_on:
      - celery
      - redis
      - postgres-db
    volumes:
      - .:/app
    networks:
      - GetUsed-network
    env_file:
      - .env.docker

  nginx:
    image: nginx:latest
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/static
    ports:
      - "80:80"
    networks:
      - GetUsed-network
    depends_on:
      - app

volumes:
  pg_data:
  static_volume:

networks:
  GetUsed-network:
    driver: bridge